#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('g-meet-ws:server');
const http = require('http');
const {Server} = require("socket.io");

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3500');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


const wss = new Server(server, {
    cors: {
        origin: ['http://localhost:3000', 'https://meet.kaigates.com/'],
        methods: ['GET', 'POST'],
        credentials: true,
    }, maxHttpBufferSize: 1e8
});
// Handling WebSocket connections
wss.on('connection', (ws) => {
    ws.emit('connection', {message: 'accepted'});
    console.log("connected new client")

    // Handle incoming message from client (e.g., user action like scrolling or highlight)
    ws.on('new-message', (message) => {
        console.log('Received message:', message.toString());
        wss.emit('new-message', {from: ws.id, data: message});
    });

    ws.on('typing', ({chatId, userId}) => {
        ws.to(chatId).emit('showTyping', {userId});
    });

    ws.on('stopTyping', ({chatId, userId}) => {
        ws.to(chatId).emit('hideTyping', {userId});
    });

    // Meeting WebSocket Events

    // Join a meeting room
    ws.on('join-meeting', ({meetingId, userId, userName}) => {
        ws.join(meetingId);
        ws.data = { ...ws.data, meetingId, userId, userName };
        console.log(`${userName} (${userId}) joined meeting ${meetingId}`);

        // Notify others in the meeting
        ws.to(meetingId).emit('user-joined-meeting', {
            userId,
            userName,
            socketId: ws.id
        });

        // Send current participants to the new joiner
        const room = wss.sockets.adapter.rooms.get(meetingId);
        const participantCount = room ? room.size : 0;
        ws.emit('meeting-info', { meetingId, participantCount });
    });

    // Leave meeting room
    ws.on('leave-meeting', ({meetingId, userId, userName}) => {
        ws.leave(meetingId);
        console.log(`${userName} (${userId}) left meeting ${meetingId}`);

        // Notify others in the meeting
        ws.to(meetingId).emit('user-left-meeting', {
            userId,
            userName,
            socketId: ws.id
        });
    });

    // Meeting status updates (started, ended)
    ws.on('meeting-status-update', ({meetingId, status, data}) => {
        console.log(`Meeting ${meetingId} status updated to ${status}`);
        wss.to(meetingId).emit('meeting-status-changed', {
            meetingId,
            status,
            data
        });
    });

    // Participant status updates (mute, video off, etc.)
    ws.on('participant-status-update', ({meetingId, userId, status}) => {
        ws.to(meetingId).emit('participant-status-changed', {
            userId,
            status
        });
    });

    // New meeting created (broadcast to dashboard users)
    ws.on('meeting-created', (meetingData) => {
        wss.emit('new-meeting-created', meetingData);
    });

    // Meeting updated
    ws.on('meeting-updated', ({meetingId, data}) => {
        wss.to(meetingId).emit('meeting-data-updated', {
            meetingId,
            data
        });
    });

    // Screen sharing events (cursor, scroll, etc.) - broadcast to meeting room
    ws.on('screen-event', (data) => {
        const meetingId = ws.data?.meetingId;
        if (meetingId) {
            // Broadcast screen event to all participants in the meeting except sender
            ws.to(meetingId).emit('screen-event', {
                from: ws.id,
                userId: ws.data.userId,
                userName: ws.data.userName,
                data
            });
        }
    });

    ws.on('close', () => {
        console.log('Client disconnected');
    });

    ws.on('disconnect', () => {
        const meetingId = ws.data?.meetingId;
        const userId = ws.data?.userId;
        const userName = ws.data?.userName;

        if (meetingId && userId) {
            // Notify others that user left
            ws.to(meetingId).emit('user-left-meeting', {
                userId,
                userName,
                socketId: ws.id
            });
        }

        console.log('Client disconnected');
    });
});


// io.on('connection', (socket) => {
//   socket.on('join-room', (roomId, userId) => {
//     socket.join(roomId);
//     console.log(`${userId} joined room ${roomId}`);
//
//     // Notify others in the room
//     socket.to(roomId).emit('user-connected', userId);
//
//     socket.on('disconnect', () => {
//       socket.to(roomId).emit('user-disconnected', userId);
//     });
//   });
// });
// ts
// Copy
// Edit
// // Client-side
// socket.emit('join-room', 'abc123', userId);

// io.on('connection', (socket) => {
//   socket.on('join-room', (roomId, userId) => {
//     socket.join(roomId);
//     console.log(`${userId} joined ${roomId}`);
//
//     // Notify only others in the same room
//     socket.to(roomId).emit('user-joined', userId);
//   });
//
//   socket.on('send-message', (roomId, message) => {
//     // Broadcast message only to the room
//     io.to(roomId).emit('new-message', {
//       sender: socket.id,
//       message,
//     });
//   });
// });
